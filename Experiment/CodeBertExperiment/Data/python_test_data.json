[
  {
    "code": "def {name}(x, y):\n    return x + y",
    "nl_desc": "Adds two numbers",
    "func_name": "add_0",
    "code_with_desc": "Adds two numbers [SEP] def {name}(x, y):\n    return x + y"
  },
  {
    "code": "def {name}(x, y):\n    return x - y",
    "nl_desc": "Subtracts y from x",
    "func_name": "subtract_1",
    "code_with_desc": "Subtracts y from x [SEP] def {name}(x, y):\n    return x - y"
  },
  {
    "code": "def {name}(x, y):\n    return x * y",
    "nl_desc": "Multiplies two numbers",
    "func_name": "multiply_2",
    "code_with_desc": "Multiplies two numbers [SEP] def {name}(x, y):\n    return x * y"
  },
  {
    "code": "def {name}(x, y):\n    return x / y if y != 0 else None",
    "nl_desc": "Divides x by y safely",
    "func_name": "divide_3",
    "code_with_desc": "Divides x by y safely [SEP] def {name}(x, y):\n    return x / y if y != 0 else None"
  },
  {
    "code": "def {name}(x, y):\n    return x ** y",
    "nl_desc": "Raises x to the power of y",
    "func_name": "power_4",
    "code_with_desc": "Raises x to the power of y [SEP] def {name}(x, y):\n    return x ** y"
  },
  {
    "code": "def {name}(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result",
    "nl_desc": "Computes factorial of n",
    "func_name": "factorial_5",
    "code_with_desc": "Computes factorial of n [SEP] def {name}(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"
  },
  {
    "code": "def {name}(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a+b\n    return a",
    "nl_desc": "Returns n-th Fibonacci number",
    "func_name": "fibonacci_6",
    "code_with_desc": "Returns n-th Fibonacci number [SEP] def {name}(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a+b\n    return a"
  },
  {
    "code": "def {name}(n):\n    return n % 2 == 0",
    "nl_desc": "Checks if a number is even",
    "func_name": "is_even_7",
    "code_with_desc": "Checks if a number is even [SEP] def {name}(n):\n    return n % 2 == 0"
  },
  {
    "code": "def {name}(n):\n    return n % 2 != 0",
    "nl_desc": "Checks if a number is odd",
    "func_name": "is_odd_8",
    "code_with_desc": "Checks if a number is odd [SEP] def {name}(n):\n    return n % 2 != 0"
  },
  {
    "code": "def {name}(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True",
    "nl_desc": "Checks if a number is prime",
    "func_name": "is_prime_9",
    "code_with_desc": "Checks if a number is prime [SEP] def {name}(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
  },
  {
    "code": "def {name}(s):\n    return s == s[::-1]",
    "nl_desc": "Checks if string is a palindrome",
    "func_name": "is_palindrome_10",
    "code_with_desc": "Checks if string is a palindrome [SEP] def {name}(s):\n    return s == s[::-1]"
  },
  {
    "code": "def {name}(s):\n    return s[::-1]",
    "nl_desc": "Reverses a string",
    "func_name": "reverse_string_11",
    "code_with_desc": "Reverses a string [SEP] def {name}(s):\n    return s[::-1]"
  },
  {
    "code": "def {name}(s):\n    vowels='aeiouAEIOU'\n    return sum(1 for ch in s if ch in vowels)",
    "nl_desc": "Counts vowels in a string",
    "func_name": "count_vowels_12",
    "code_with_desc": "Counts vowels in a string [SEP] def {name}(s):\n    vowels='aeiouAEIOU'\n    return sum(1 for ch in s if ch in vowels)"
  },
  {
    "code": "def {name}(s):\n    return ' '.join(w.capitalize() for w in s.split())",
    "nl_desc": "Capitalizes every word in string",
    "func_name": "capitalize_words_13",
    "code_with_desc": "Capitalizes every word in string [SEP] def {name}(s):\n    return ' '.join(w.capitalize() for w in s.split())"
  },
  {
    "code": "def {name}(lst):\n    return sum(lst)",
    "nl_desc": "Returns sum of a list",
    "func_name": "sum_list_14",
    "code_with_desc": "Returns sum of a list [SEP] def {name}(lst):\n    return sum(lst)"
  },
  {
    "code": "def {name}(lst):\n    return max(lst)",
    "nl_desc": "Returns maximum value in a list",
    "func_name": "max_list_15",
    "code_with_desc": "Returns maximum value in a list [SEP] def {name}(lst):\n    return max(lst)"
  },
  {
    "code": "def {name}(lst):\n    return min(lst)",
    "nl_desc": "Returns minimum value in a list",
    "func_name": "min_list_16",
    "code_with_desc": "Returns minimum value in a list [SEP] def {name}(lst):\n    return min(lst)"
  },
  {
    "code": "def {name}(lst):\n    return [item for sublist in lst for item in sublist]",
    "nl_desc": "Flattens a nested list",
    "func_name": "flatten_list_17",
    "code_with_desc": "Flattens a nested list [SEP] def {name}(lst):\n    return [item for sublist in lst for item in sublist]"
  },
  {
    "code": "def {name}(lst):\n    return [x for x in lst if x % 2 == 0]",
    "nl_desc": "Filters even numbers from a list",
    "func_name": "filter_even_18",
    "code_with_desc": "Filters even numbers from a list [SEP] def {name}(lst):\n    return [x for x in lst if x % 2 == 0]"
  },
  {
    "code": "def {name}(lst):\n    return [x for x in lst if x % 2 != 0]",
    "nl_desc": "Filters odd numbers from a list",
    "func_name": "filter_odd_19",
    "code_with_desc": "Filters odd numbers from a list [SEP] def {name}(lst):\n    return [x for x in lst if x % 2 != 0]"
  },
  {
    "code": "def {name}(d):\n    return {v:k for k,v in d.items()}",
    "nl_desc": "Inverts keys and values in a dict",
    "func_name": "invert_dict_20",
    "code_with_desc": "Inverts keys and values in a dict [SEP] def {name}(d):\n    return {v:k for k,v in d.items()}"
  },
  {
    "code": "def {name}(d1, d2):\n    return {**d1, **d2}",
    "nl_desc": "Merges two dictionaries",
    "func_name": "merge_dicts_21",
    "code_with_desc": "Merges two dictionaries [SEP] def {name}(d1, d2):\n    return {**d1, **d2}"
  },
  {
    "code": "def {name}(d):\n    return len(d.keys())",
    "nl_desc": "Counts keys in a dictionary",
    "func_name": "count_keys_22",
    "code_with_desc": "Counts keys in a dictionary [SEP] def {name}(d):\n    return len(d.keys())"
  },
  {
    "code": "def {name}(x, y):\n    return x + y",
    "nl_desc": "Adds two numbers",
    "func_name": "add_23",
    "code_with_desc": "Adds two numbers [SEP] def {name}(x, y):\n    return x + y"
  },
  {
    "code": "def {name}(x, y):\n    return x - y",
    "nl_desc": "Subtracts y from x",
    "func_name": "subtract_24",
    "code_with_desc": "Subtracts y from x [SEP] def {name}(x, y):\n    return x - y"
  },
  {
    "code": "def {name}(x, y):\n    return x * y",
    "nl_desc": "Multiplies two numbers",
    "func_name": "multiply_25",
    "code_with_desc": "Multiplies two numbers [SEP] def {name}(x, y):\n    return x * y"
  },
  {
    "code": "def {name}(x, y):\n    return x / y if y != 0 else None",
    "nl_desc": "Divides x by y safely",
    "func_name": "divide_26",
    "code_with_desc": "Divides x by y safely [SEP] def {name}(x, y):\n    return x / y if y != 0 else None"
  },
  {
    "code": "def {name}(x, y):\n    return x ** y",
    "nl_desc": "Raises x to the power of y",
    "func_name": "power_27",
    "code_with_desc": "Raises x to the power of y [SEP] def {name}(x, y):\n    return x ** y"
  },
  {
    "code": "def {name}(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result",
    "nl_desc": "Computes factorial of n",
    "func_name": "factorial_28",
    "code_with_desc": "Computes factorial of n [SEP] def {name}(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"
  },
  {
    "code": "def {name}(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a+b\n    return a",
    "nl_desc": "Returns n-th Fibonacci number",
    "func_name": "fibonacci_29",
    "code_with_desc": "Returns n-th Fibonacci number [SEP] def {name}(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a+b\n    return a"
  },
  {
    "code": "def {name}(n):\n    return n % 2 == 0",
    "nl_desc": "Checks if a number is even",
    "func_name": "is_even_30",
    "code_with_desc": "Checks if a number is even [SEP] def {name}(n):\n    return n % 2 == 0"
  },
  {
    "code": "def {name}(n):\n    return n % 2 != 0",
    "nl_desc": "Checks if a number is odd",
    "func_name": "is_odd_31",
    "code_with_desc": "Checks if a number is odd [SEP] def {name}(n):\n    return n % 2 != 0"
  },
  {
    "code": "def {name}(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True",
    "nl_desc": "Checks if a number is prime",
    "func_name": "is_prime_32",
    "code_with_desc": "Checks if a number is prime [SEP] def {name}(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
  },
  {
    "code": "def {name}(s):\n    return s == s[::-1]",
    "nl_desc": "Checks if string is a palindrome",
    "func_name": "is_palindrome_33",
    "code_with_desc": "Checks if string is a palindrome [SEP] def {name}(s):\n    return s == s[::-1]"
  },
  {
    "code": "def {name}(s):\n    return s[::-1]",
    "nl_desc": "Reverses a string",
    "func_name": "reverse_string_34",
    "code_with_desc": "Reverses a string [SEP] def {name}(s):\n    return s[::-1]"
  },
  {
    "code": "def {name}(s):\n    vowels='aeiouAEIOU'\n    return sum(1 for ch in s if ch in vowels)",
    "nl_desc": "Counts vowels in a string",
    "func_name": "count_vowels_35",
    "code_with_desc": "Counts vowels in a string [SEP] def {name}(s):\n    vowels='aeiouAEIOU'\n    return sum(1 for ch in s if ch in vowels)"
  },
  {
    "code": "def {name}(s):\n    return ' '.join(w.capitalize() for w in s.split())",
    "nl_desc": "Capitalizes every word in string",
    "func_name": "capitalize_words_36",
    "code_with_desc": "Capitalizes every word in string [SEP] def {name}(s):\n    return ' '.join(w.capitalize() for w in s.split())"
  },
  {
    "code": "def {name}(lst):\n    return sum(lst)",
    "nl_desc": "Returns sum of a list",
    "func_name": "sum_list_37",
    "code_with_desc": "Returns sum of a list [SEP] def {name}(lst):\n    return sum(lst)"
  },
  {
    "code": "def {name}(lst):\n    return max(lst)",
    "nl_desc": "Returns maximum value in a list",
    "func_name": "max_list_38",
    "code_with_desc": "Returns maximum value in a list [SEP] def {name}(lst):\n    return max(lst)"
  },
  {
    "code": "def {name}(lst):\n    return min(lst)",
    "nl_desc": "Returns minimum value in a list",
    "func_name": "min_list_39",
    "code_with_desc": "Returns minimum value in a list [SEP] def {name}(lst):\n    return min(lst)"
  },
  {
    "code": "def {name}(lst):\n    return [item for sublist in lst for item in sublist]",
    "nl_desc": "Flattens a nested list",
    "func_name": "flatten_list_40",
    "code_with_desc": "Flattens a nested list [SEP] def {name}(lst):\n    return [item for sublist in lst for item in sublist]"
  },
  {
    "code": "def {name}(lst):\n    return [x for x in lst if x % 2 == 0]",
    "nl_desc": "Filters even numbers from a list",
    "func_name": "filter_even_41",
    "code_with_desc": "Filters even numbers from a list [SEP] def {name}(lst):\n    return [x for x in lst if x % 2 == 0]"
  },
  {
    "code": "def {name}(lst):\n    return [x for x in lst if x % 2 != 0]",
    "nl_desc": "Filters odd numbers from a list",
    "func_name": "filter_odd_42",
    "code_with_desc": "Filters odd numbers from a list [SEP] def {name}(lst):\n    return [x for x in lst if x % 2 != 0]"
  },
  {
    "code": "def {name}(d):\n    return {v:k for k,v in d.items()}",
    "nl_desc": "Inverts keys and values in a dict",
    "func_name": "invert_dict_43",
    "code_with_desc": "Inverts keys and values in a dict [SEP] def {name}(d):\n    return {v:k for k,v in d.items()}"
  },
  {
    "code": "def {name}(d1, d2):\n    return {**d1, **d2}",
    "nl_desc": "Merges two dictionaries",
    "func_name": "merge_dicts_44",
    "code_with_desc": "Merges two dictionaries [SEP] def {name}(d1, d2):\n    return {**d1, **d2}"
  },
  {
    "code": "def {name}(d):\n    return len(d.keys())",
    "nl_desc": "Counts keys in a dictionary",
    "func_name": "count_keys_45",
    "code_with_desc": "Counts keys in a dictionary [SEP] def {name}(d):\n    return len(d.keys())"
  },
  {
    "code": "def {name}(x, y):\n    return x + y",
    "nl_desc": "Adds two numbers",
    "func_name": "add_46",
    "code_with_desc": "Adds two numbers [SEP] def {name}(x, y):\n    return x + y"
  },
  {
    "code": "def {name}(x, y):\n    return x - y",
    "nl_desc": "Subtracts y from x",
    "func_name": "subtract_47",
    "code_with_desc": "Subtracts y from x [SEP] def {name}(x, y):\n    return x - y"
  },
  {
    "code": "def {name}(x, y):\n    return x * y",
    "nl_desc": "Multiplies two numbers",
    "func_name": "multiply_48",
    "code_with_desc": "Multiplies two numbers [SEP] def {name}(x, y):\n    return x * y"
  },
  {
    "code": "def {name}(x, y):\n    return x / y if y != 0 else None",
    "nl_desc": "Divides x by y safely",
    "func_name": "divide_49",
    "code_with_desc": "Divides x by y safely [SEP] def {name}(x, y):\n    return x / y if y != 0 else None"
  },
  {
    "code": "def {name}(x, y):\n    return x ** y",
    "nl_desc": "Raises x to the power of y",
    "func_name": "power_50",
    "code_with_desc": "Raises x to the power of y [SEP] def {name}(x, y):\n    return x ** y"
  },
  {
    "code": "def {name}(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result",
    "nl_desc": "Computes factorial of n",
    "func_name": "factorial_51",
    "code_with_desc": "Computes factorial of n [SEP] def {name}(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"
  },
  {
    "code": "def {name}(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a+b\n    return a",
    "nl_desc": "Returns n-th Fibonacci number",
    "func_name": "fibonacci_52",
    "code_with_desc": "Returns n-th Fibonacci number [SEP] def {name}(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a+b\n    return a"
  },
  {
    "code": "def {name}(n):\n    return n % 2 == 0",
    "nl_desc": "Checks if a number is even",
    "func_name": "is_even_53",
    "code_with_desc": "Checks if a number is even [SEP] def {name}(n):\n    return n % 2 == 0"
  },
  {
    "code": "def {name}(n):\n    return n % 2 != 0",
    "nl_desc": "Checks if a number is odd",
    "func_name": "is_odd_54",
    "code_with_desc": "Checks if a number is odd [SEP] def {name}(n):\n    return n % 2 != 0"
  },
  {
    "code": "def {name}(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True",
    "nl_desc": "Checks if a number is prime",
    "func_name": "is_prime_55",
    "code_with_desc": "Checks if a number is prime [SEP] def {name}(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
  },
  {
    "code": "def {name}(s):\n    return s == s[::-1]",
    "nl_desc": "Checks if string is a palindrome",
    "func_name": "is_palindrome_56",
    "code_with_desc": "Checks if string is a palindrome [SEP] def {name}(s):\n    return s == s[::-1]"
  },
  {
    "code": "def {name}(s):\n    return s[::-1]",
    "nl_desc": "Reverses a string",
    "func_name": "reverse_string_57",
    "code_with_desc": "Reverses a string [SEP] def {name}(s):\n    return s[::-1]"
  },
  {
    "code": "def {name}(s):\n    vowels='aeiouAEIOU'\n    return sum(1 for ch in s if ch in vowels)",
    "nl_desc": "Counts vowels in a string",
    "func_name": "count_vowels_58",
    "code_with_desc": "Counts vowels in a string [SEP] def {name}(s):\n    vowels='aeiouAEIOU'\n    return sum(1 for ch in s if ch in vowels)"
  },
  {
    "code": "def {name}(s):\n    return ' '.join(w.capitalize() for w in s.split())",
    "nl_desc": "Capitalizes every word in string",
    "func_name": "capitalize_words_59",
    "code_with_desc": "Capitalizes every word in string [SEP] def {name}(s):\n    return ' '.join(w.capitalize() for w in s.split())"
  },
  {
    "code": "def {name}(lst):\n    return sum(lst)",
    "nl_desc": "Returns sum of a list",
    "func_name": "sum_list_60",
    "code_with_desc": "Returns sum of a list [SEP] def {name}(lst):\n    return sum(lst)"
  },
  {
    "code": "def {name}(lst):\n    return max(lst)",
    "nl_desc": "Returns maximum value in a list",
    "func_name": "max_list_61",
    "code_with_desc": "Returns maximum value in a list [SEP] def {name}(lst):\n    return max(lst)"
  },
  {
    "code": "def {name}(lst):\n    return min(lst)",
    "nl_desc": "Returns minimum value in a list",
    "func_name": "min_list_62",
    "code_with_desc": "Returns minimum value in a list [SEP] def {name}(lst):\n    return min(lst)"
  },
  {
    "code": "def {name}(lst):\n    return [item for sublist in lst for item in sublist]",
    "nl_desc": "Flattens a nested list",
    "func_name": "flatten_list_63",
    "code_with_desc": "Flattens a nested list [SEP] def {name}(lst):\n    return [item for sublist in lst for item in sublist]"
  },
  {
    "code": "def {name}(lst):\n    return [x for x in lst if x % 2 == 0]",
    "nl_desc": "Filters even numbers from a list",
    "func_name": "filter_even_64",
    "code_with_desc": "Filters even numbers from a list [SEP] def {name}(lst):\n    return [x for x in lst if x % 2 == 0]"
  },
  {
    "code": "def {name}(lst):\n    return [x for x in lst if x % 2 != 0]",
    "nl_desc": "Filters odd numbers from a list",
    "func_name": "filter_odd_65",
    "code_with_desc": "Filters odd numbers from a list [SEP] def {name}(lst):\n    return [x for x in lst if x % 2 != 0]"
  },
  {
    "code": "def {name}(d):\n    return {v:k for k,v in d.items()}",
    "nl_desc": "Inverts keys and values in a dict",
    "func_name": "invert_dict_66",
    "code_with_desc": "Inverts keys and values in a dict [SEP] def {name}(d):\n    return {v:k for k,v in d.items()}"
  },
  {
    "code": "def {name}(d1, d2):\n    return {**d1, **d2}",
    "nl_desc": "Merges two dictionaries",
    "func_name": "merge_dicts_67",
    "code_with_desc": "Merges two dictionaries [SEP] def {name}(d1, d2):\n    return {**d1, **d2}"
  },
  {
    "code": "def {name}(d):\n    return len(d.keys())",
    "nl_desc": "Counts keys in a dictionary",
    "func_name": "count_keys_68",
    "code_with_desc": "Counts keys in a dictionary [SEP] def {name}(d):\n    return len(d.keys())"
  }
]