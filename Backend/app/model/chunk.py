from pydantic import BaseModel, Field
from typing import Optional, Literal, List, Union 
from enum import Enum


class AnnotationStatus(str, Enum):
    RAW = "RAW"
    UNANNOTATED = "UNANNOTATED"
    PENDING = "PENDING"
    ANNOTATED = "ANNOTATED"
    FAILED_QUOTA = "FAILED_QUOTA"
    FAILED_GEN = "FAILED_GEN"
class Chunk(BaseModel):
    
    chunkId: str 
    source: Literal["code", "specification", "documentation"]
    chunk: str  
    project: str
    repo: str
    version: str
    isEmbedded: bool = False

    section: Union[str, List[str]]
    file: Union[str, List[str]]

    
    description: Optional[str] = Field(
        None, 
        alias="annotation", 
        description="Human-readable description generated by LLM (Maps to 'annotation' in DB)."
    )
    
    #Fields for the Annotation Service Status and Timestamp
    status: AnnotationStatus = Field(AnnotationStatus.RAW, description="Processing status of the chunk.")
    last_annotated_at: Optional[float] = None
    
    # --- FIX 1: ADDED MISSING FIELDS FOR PERSISTENCE ---
    pending_since: Optional[float] = None
    retry_count: int = 0 
    
    # Configuration to ensure Pydantic can read from the alias
    class Config:
        populate_by_name = True